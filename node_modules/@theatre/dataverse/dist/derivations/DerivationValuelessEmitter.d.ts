import Emitter from '../utils/Emitter';
import type { default as Tappable } from '../utils/Tappable';
import type { IDerivation } from './IDerivation';
/**
 * Just like DerivationEmitter, except it doesn't emit the value and doesn't need a ticker
 */
export default class DerivationValuelessEmitter<V> {
    readonly dontEmitValues: boolean;
    _derivation: IDerivation<V>;
    _emitter: Emitter<void>;
    _hadTappers: boolean;
    constructor(derivation: IDerivation<V>, dontEmitValues?: boolean);
    private _possiblyMarkAsStale;
    _reactToNumberOfTappersChange(): void;
    tappable(): Tappable<void>;
}
//# sourceMappingURL=DerivationValuelessEmitter.d.ts.map